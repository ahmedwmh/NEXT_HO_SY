const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Arabic first names
const arabicFirstNames = [
  'ุฃุญูุฏ', 'ูุญูุฏ', 'ุนูู', 'ุญุณู', 'ุญุณูู', 'ุนูุฑ', 'ุฎุงูุฏ', 'ููุณู', 'ุฅุจุฑุงููู', 'ุนุจุฏุงููู',
  'ุนุจุฏุงูุฑุญูู', 'ุนุจุฏุงูุนุฒูุฒ', 'ุนุจุฏุงูููุงุจ', 'ุนุจุฏุงูุฑุญูู', 'ุนุจุฏุงููุญุณู', 'ุนุจุฏุงูููุนู',
  'ุนุจุฏุงููุงุฏู', 'ุนุจุฏุงููุทูู', 'ุนุจุฏุงูุณุชุงุฑ', 'ุนุจุฏุงูุฑุญูู', 'ููุฑ ุงูุฏูู', 'ุฒูู ุงูุนุงุจุฏูู',
  'ุทุงูุฑ', 'ุณุนุฏ', 'ูุงุถู', 'ูุงุธู', 'ูุญููุฏ', 'ุฌุนูุฑ', 'ุนุจุฏุงูููุงุจ', 'ุนุจุฏุงูุฑุญูู'
];

// Arabic last names
const arabicLastNames = [
  'ุงููุญููุฏ', 'ุงูุญุณู', 'ุงูุฑุดูุฏ', 'ุงูุจุบุฏุงุฏู', 'ุงูุจุตุฑู', 'ุงูููุตูู', 'ุงููุฑุฏู',
  'ุงูุฌุนูุฑู', 'ุงูุญุณููู', 'ุงูุทูุณู', 'ุงูุฑุงุฒู', 'ุงูุฎูุงุฑุฒูู', 'ุงูุนุจุงุณู', 'ุงููุฌูู',
  'ุงูุทุจุฑู', 'ุงูุทุจุฑุณู', 'ุงูุณููุทู', 'ุงูุบุฒุงูู', 'ุงุจู ุณููุง', 'ุงุจู ุฎูุฏูู', 'ุงููุฑุงููุฏู',
  'ุงูุฎููู', 'ุงูุฃูุจุงุฑู', 'ุงูุดูุฑุงุฒู', 'ุงูุฑููู', 'ุงููุฑุจูุงุฆู', 'ุงูููุตูู', 'ุงูุญุณูู',
  'ุงูุจุตุฑู', 'ุงูุทูุณู', 'ุงููุฌูู', 'ุงูุฌุนูุฑู', 'ุงูุญุณููู', 'ุงูุทุจุฑุณู', 'ุงูุณููุทู'
];

// Medical specializations in Arabic
const specializations = [
  'ุฃูุฑุงุถ ุงูููุจ', 'ุฌุฑุงุญุฉ ุนุงูุฉ', 'ุทุจ ุงูุฃุทูุงู', 'ุงููุณุงุก ูุงูููุงุฏุฉ', 'ุงูุนุธุงู',
  'ุงูุนููู', 'ุงูุฃุฐู ูุงูุฃูู ูุงูุญูุฌุฑุฉ', 'ุงูุฌูุฏูุฉ', 'ุงูุฃุนุตุงุจ', 'ุงูุทุจ ุงูููุณู',
  'ุงูุทุจ ุงูุจุงุทูู', 'ุงูุทูุงุฑุฆ', 'ุงูุชุฎุฏูุฑ', 'ุงูุฃุดุนุฉ', 'ุงูุทุจ ุงููููู',
  'ุงูุทุจ ุงูุฑูุงุถู', 'ุงูุทุจ ุงููููู', 'ุงูุทุจ ุงูุดุฑุนู', 'ุงูุทุจ ุงูููุงุฆู', 'ุงูุทุจ ุงูุชุฌูููู'
];

// Hospital names (we'll get these from the database)
let hospitals = [];

async function main() {
  console.log('๐ฅ Starting English Doctor Seeding...\n');

  try {
    // Get all hospitals from database
    hospitals = await prisma.hospital.findMany({
      include: { city: true }
    });

    if (hospitals.length === 0) {
      console.log('โ No hospitals found. Please run the main seed script first.');
      return;
    }

    console.log(`๐ Found ${hospitals.length} hospitals`);

    // Create English doctor accounts
    console.log('\n๐จโโ๏ธ Creating English Doctor Accounts...');
    const doctors = [];
    let doctorCounter = 1;

    for (const hospital of hospitals) {
      // Create 3-5 doctors per hospital
      const doctorCount = Math.floor(Math.random() * 3) + 3;
      
      for (let i = 1; i <= doctorCount; i++) {
        try {
          const firstName = arabicFirstNames[Math.floor(Math.random() * arabicFirstNames.length)];
          const lastName = arabicLastNames[Math.floor(Math.random() * arabicLastNames.length)];
          const specialization = specializations[Math.floor(Math.random() * specializations.length)];
          
          // Create simple English email with unique counter
          const email = `doctor${doctorCounter}@gmail.com`;
          doctorCounter++;
          
          // Create user account
          const doctorUser = await prisma.user.create({
            data: {
              email: email,
              password: 'doctor123',
              role: 'DOCTOR',
            },
          });

          // Create doctor profile
          const doctor = await prisma.doctor.create({
            data: {
              userId: doctorUser.id,
              hospitalId: hospital.id,
              firstName: firstName,
              lastName: lastName,
              specialization: specialization,
              phone: `+964-${Math.floor(Math.random() * 9000000000) + 1000000000}`,
              licenseNumber: `MD-${Math.floor(Math.random() * 900000) + 100000}`,
            },
          });
          
          doctors.push(doctor);
          console.log(`โ Created: ${firstName} ${lastName} - ${specialization} (${email})`);
        } catch (error) {
          console.error(`โ Error creating doctor for ${hospital.name}:`, error.message);
        }
      }
    }

    console.log(`\n๐ Successfully created ${doctors.length} English doctor accounts!`);
    
    // Display login credentials
    console.log('\n๐ Login Credentials:');
    console.log('Email format: doctor[number]@[hospital].com');
    console.log('Password: doctor123');
    console.log('\nExample accounts:');
    
    // Show first 5 doctor accounts as examples
    const exampleDoctors = doctors.slice(0, 5);
    for (const doctor of exampleDoctors) {
      const user = await prisma.user.findUnique({
        where: { id: doctor.userId }
      });
      const hospital = await prisma.hospital.findUnique({
        where: { id: doctor.hospitalId }
      });
      console.log(`- ${doctor.firstName} ${doctor.lastName} (${doctor.specialization})`);
      console.log(`  Email: ${user.email}`);
      console.log(`  Hospital: ${hospital.name}`);
      console.log('');
    }

  } catch (error) {
    console.error('โ Error seeding doctors:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main()
  .catch((e) => {
    console.error('โ Error:', e);
    process.exit(1);
  });
