const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL, // Use transaction pooler for better performance
    },
  },
});

// ุงููุญุงูุธุงุช ุงูุนุฑุงููุฉ (ุงููุฏู)
const iraqiGovernorates = [
  'ุจุบุฏุงุฏ',
  'ุงูุจุตุฑุฉ',
  'ุงูููุตู',
  'ุฃุฑุจูู',
  'ุงูุณูููุงููุฉ',
  'ุฏููู',
  'ูุฑููู',
  'ุงูุฃูุจุงุฑ',
  'ุงููุฌู',
  'ูุฑุจูุงุก',
  'ุจุงุจู',
  'ูุงุณุท',
  'ุฏูุงูู',
  'ููุณุงู',
  'ุงููุซูู',
  'ุงููุงุฏุณูุฉ',
  'ุฐู ูุงุฑ',
  'ุตูุงุญ ุงูุฏูู'
];

// ุงูุชุฎุตุตุงุช ุงูุทุจูุฉ
const specializations = [
  'ุฃูุฑุงุถ ุงูููุจ',
  'ุฃูุฑุงุถ ุงูุฃุนุตุงุจ',
  'ุงูุนุธุงู',
  'ุทุจ ุงูุฃุทูุงู',
  'ุฃูุฑุงุถ ุงููุณุงุก',
  'ุงูุฃูุฑุงุถ ุงูุฌูุฏูุฉ',
  'ุฃูุฑุงุถ ุงูุนููู',
  'ุฃูู ูุฃุฐู ูุญูุฌุฑุฉ',
  'ุงูุฌุฑุงุญุฉ ุงูุนุงูุฉ',
  'ุงูุทุจ ุงูุจุงุทูู',
  'ุงูุทูุงุฑุฆ',
  'ุงูุชุฎุฏูุฑ',
  'ุงูุฃุดุนุฉ',
  'ุงูุทุจ ุงูุดุฑุนู',
  'ุงูุทุจ ุงูููุณู'
];

// ููุงุตุจ ุงูููุธููู
const staffPositions = [
  'ููุฑุถ',
  'ููู ูุฎุชุจุฑ',
  'ููู ุฃุดุนุฉ',
  'ุตูุฏูู',
  'ููุธู ุฅุฏุงุฑู',
  'ููุธู ุงุณุชูุจุงู',
  'ุญุงุฑุณ ุฃูู',
  'ููู ุตูุงูุฉ',
  'ุฏุนู ุชููู',
  'ูุญุงุณุจ'
];

async function main() {
  console.log('๐ฎ๐ถ ุจุฏุก ุฅูุดุงุก ุจูุงูุงุช ุงููุณุชุดููุงุช ุงูุนุฑุงููุฉ...');

  try {
    // ุฅูุดุงุก ุงููุฏู ุงูุนุฑุงููุฉ
    console.log('๐๏ธ  ุฅูุดุงุก ุงููุญุงูุธุงุช ุงูุนุฑุงููุฉ...');
    const cities = [];
    for (const governorate of iraqiGovernorates) {
      const city = await prisma.city.upsert({
        where: { name: governorate },
        update: {},
        create: { name: governorate },
      });
      cities.push(city);
      console.log(`โ ุชู ุฅูุดุงุก ุงููุฏููุฉ: ${governorate}`);
    }

    // ุฅูุดุงุก ุงููุณุชุดููุงุช ูุจุงุดุฑุฉ ูููุฏู ุงูุฑุฆูุณูุฉ
    console.log('\n๐ฅ ุฅูุดุงุก ุงููุณุชุดููุงุช...');
    const hospitals = [];
    const majorCities = ['ุจุบุฏุงุฏ', 'ุงูุจุตุฑุฉ', 'ุงูููุตู', 'ุฃุฑุจูู', 'ุงูุณูููุงููุฉ'];
    
    for (const cityName of majorCities) {
      const city = cities.find(c => c.name === cityName);
      if (city) {
        // ุฅูุดุงุก 2-3 ูุณุชุดููุงุช ููู ูุฏููุฉ ุฑุฆูุณูุฉ
        const hospitalCount = cityName === 'ุจุบุฏุงุฏ' ? 3 : 2;
        
        for (let i = 1; i <= hospitalCount; i++) {
          const hospital = await prisma.hospital.upsert({
            where: { id: `hospital-${city.id}-${i}` },
            update: {},
            create: {
              id: `hospital-${city.id}-${i}`,
              name: `ูุณุชุดูู ${cityName} ุงูุนุงู ${i > 1 ? i : ''}`.trim(),
              address: `ุงูููุทูุฉ ุงูุทุจูุฉ ${i}, ${cityName}, ุงูุนุฑุงู`,
              phone: `+964-${Math.floor(Math.random() * 9000000000) + 1000000000}`,
              email: `info@${cityName.replace(' ', '')}hospital${i > 1 ? i : ''}.iq`,
              cityId: city.id,
            },
          });
          hospitals.push(hospital);
          console.log(`โ ุชู ุฅูุดุงุก ุงููุณุชุดูู: ${hospital.name}`);
        }
      }
    }

    // ุฅูุดุงุก ูุณุชุฎุฏู ุงูุฅุฏุงุฑุฉ
    console.log('\n๐ค ุฅูุดุงุก ูุณุชุฎุฏู ุงูุฅุฏุงุฑุฉ...');
    const adminUser = await prisma.user.upsert({
      where: { email: 'admin@hospital.com' },
      update: {},
      create: {
        id: 'admin-user',
        email: 'admin@hospital.com',
        password: 'admin123',
        role: 'ADMIN',
      },
    });
    console.log('โ ุชู ุฅูุดุงุก ูุณุชุฎุฏู ุงูุฅุฏุงุฑุฉ');

    // ุฅูุดุงุก ุงูุฃุทุจุงุก ููู ูุณุชุดูู
    console.log('\n๐จโโ๏ธ ุฅูุดุงุก ุงูุฃุทุจุงุก...');
    const doctors = [];
    for (const hospital of hospitals) {
      const doctorCount = Math.floor(Math.random() * 3) + 3; // 3-5 ุฃุทุจุงุก ููู ูุณุชุดูู
      
      for (let i = 1; i <= doctorCount; i++) {
        try {
          const specialization = specializations[Math.floor(Math.random() * specializations.length)];
          const firstName = `ุฏ. ${['ุฃุญูุฏ', 'ูุญูุฏ', 'ุนูู', 'ุญุณู', 'ุนูุฑ', 'ุฎุงูุฏ', 'ููุณู', 'ุฅุจุฑุงููู'][Math.floor(Math.random() * 8)]}`;
          const lastName = ['ุงููุญููุฏ', 'ุงูุญุณู', 'ุงูุฑุดูุฏ', 'ุงูุจุบุฏุงุฏู', 'ุงูุจุตุฑู', 'ุงูููุตูู', 'ุงููุฑุฏู'][Math.floor(Math.random() * 7)];
          
          const doctorUser = await prisma.user.create({
            data: {
              email: `doctor${i}@${hospital.name.toLowerCase().replace(/\s+/g, '')}.iq`,
              password: 'doctor123',
              role: 'DOCTOR',
            },
          });

          const doctor = await prisma.doctor.create({
            data: {
              userId: doctorUser.id,
              hospitalId: hospital.id,
              firstName: firstName,
              lastName: lastName,
              specialization: specialization,
              phone: `+964-${Math.floor(Math.random() * 9000000000) + 1000000000}`,
              licenseNumber: `MD-${Math.floor(Math.random() * 900000) + 100000}`,
            },
          });
          
          doctors.push(doctor);
          console.log(`โ ุชู ุฅูุดุงุก ุงูุทุจูุจ: ${firstName} ${lastName} - ${specialization}`);
          
          // ุฅุถุงูุฉ ุชุฃุฎูุฑ ุตุบูุฑ ูููุน ูุดุงูู ุชุฌูุน ุงูุงุชุตุงูุงุช
          await new Promise(resolve => setTimeout(resolve, 100));
        } catch (error) {
          console.error(`โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุทุจูุจ ูููุณุชุดูู ${hospital.name}:`, error.message);
        }
      }
    }

    // ุฅูุดุงุก ุงูููุธููู ููู ูุณุชุดูู
    console.log('\n๐ฅ ุฅูุดุงุก ุงูููุธููู...');
    const staff = [];
    for (const hospital of hospitals) {
      const staffCount = Math.floor(Math.random() * 5) + 5; // 5-9 ููุธู ููู ูุณุชุดูู
      
      for (let i = 1; i <= staffCount; i++) {
        try {
          const position = staffPositions[Math.floor(Math.random() * staffPositions.length)];
          const firstName = ['ูุงุทูุฉ', 'ุนุงุฆุดุฉ', 'ุฒููุจ', 'ุฎุฏูุฌุฉ', 'ูุฑูู', 'ููุฑ', 'ูููู', 'ูุงูุฉ'][Math.floor(Math.random() * 8)];
          const lastName = ['ุงููุญููุฏ', 'ุงูุญุณู', 'ุงูุฑุดูุฏ', 'ุงูุจุบุฏุงุฏู', 'ุงูุจุตุฑู', 'ุงูููุตูู', 'ุงููุฑุฏู'][Math.floor(Math.random() * 7)];
          
          const staffUser = await prisma.user.create({
            data: {
              email: `staff${i}@${hospital.name.toLowerCase().replace(/\s+/g, '')}.iq`,
              password: 'staff123',
              role: 'STAFF',
            },
          });

          const staffMember = await prisma.staff.create({
            data: {
              userId: staffUser.id,
              hospitalId: hospital.id,
              firstName: firstName,
              lastName: lastName,
              position: position,
              phone: `+964-${Math.floor(Math.random() * 9000000000) + 1000000000}`,
            },
          });
          
          staff.push(staffMember);
          console.log(`โ ุชู ุฅูุดุงุก ุงูููุธู: ${firstName} ${lastName} - ${position}`);
          
          // ุฅุถุงูุฉ ุชุฃุฎูุฑ ุตุบูุฑ ูููุน ูุดุงูู ุชุฌูุน ุงูุงุชุตุงูุงุช
          await new Promise(resolve => setTimeout(resolve, 100));
        } catch (error) {
          console.error(`โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูููุธู ูููุณุชุดูู ${hospital.name}:`, error.message);
        }
      }
    }

    // ุฅูุดุงุก ุนููุฉ ูู ุงููุฑุถู
    console.log('\n๐ค ุฅูุดุงุก ุนููุฉ ูู ุงููุฑุถู...');
    const patients = [];
    for (const hospital of hospitals) {
      const patientCount = Math.floor(Math.random() * 5) + 5; // 5-9 ูุฑูุถ ููู ูุณุชุดูู
      
      for (let i = 1; i <= patientCount; i++) {
        try {
          const firstName = ['ุฃุญูุฏ', 'ูุญูุฏ', 'ุนูู', 'ุญุณู', 'ุนูุฑ', 'ุฎุงูุฏ', 'ููุณู', 'ุฅุจุฑุงููู', 'ูุงุทูุฉ', 'ุนุงุฆุดุฉ', 'ุฒููุจ', 'ุฎุฏูุฌุฉ', 'ูุฑูู', 'ููุฑ', 'ูููู', 'ูุงูุฉ'][Math.floor(Math.random() * 16)];
          const lastName = ['ุงููุญููุฏ', 'ุงูุญุณู', 'ุงูุฑุดูุฏ', 'ุงูุจุบุฏุงุฏู', 'ุงูุจุตุฑู', 'ุงูููุตูู', 'ุงููุฑุฏู', 'ุงููุฌูู', 'ุงููุฑุจูุงุฆู'][Math.floor(Math.random() * 9)];
          const gender = Math.random() > 0.5 ? 'ุฐูุฑ' : 'ุฃูุซู';
          const bloodTypes = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];
          const bloodType = bloodTypes[Math.floor(Math.random() * bloodTypes.length)];
          
          // ุชูููุฏ ุชุงุฑูุฎ ูููุงุฏ ุนุดูุงุฆู (18-80 ุณูุฉ)
          const birthYear = new Date().getFullYear() - Math.floor(Math.random() * 62) - 18;
          const birthMonth = Math.floor(Math.random() * 12);
          const birthDay = Math.floor(Math.random() * 28) + 1;
          
          const patient = await prisma.patient.create({
            data: {
              hospitalId: hospital.id,
              patientNumber: `P${hospital.id.slice(-4)}${String(i).padStart(3, '0')}`,
              firstName: firstName,
              lastName: lastName,
              dateOfBirth: new Date(birthYear, birthMonth, birthDay),
              gender: gender,
              phone: `+964-${Math.floor(Math.random() * 9000000000) + 1000000000}`,
              email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}@email.com`,
              address: `ุงูููุทูุฉ ${Math.floor(Math.random() * 10) + 1}, ${hospital.name.split(' ')[1]}, ุงูุนุฑุงู`,
              emergencyContact: `+964-${Math.floor(Math.random() * 9000000000) + 1000000000}`,
              bloodType: bloodType,
              allergies: Math.random() > 0.7 ? ['ุงูุจูุณููู', 'ุงูุฃุณุจุฑูู', 'ุงููุงุชูุณ'][Math.floor(Math.random() * 3)] : null,
              medicalHistory: Math.random() > 0.5 ? 'ุญุงูุงุช ุทุจูุฉ ุณุงุจูุฉ' : null,
            },
          });
          
          patients.push(patient);
          console.log(`โ ุชู ุฅูุดุงุก ุงููุฑูุถ: ${firstName} ${lastName}`);
          
          // ุฅุถุงูุฉ ุชุฃุฎูุฑ ุตุบูุฑ ูููุน ูุดุงูู ุชุฌูุน ุงูุงุชุตุงูุงุช
          await new Promise(resolve => setTimeout(resolve, 100));
        } catch (error) {
          console.error(`โ ุฎุทุฃ ูู ุฅูุดุงุก ุงููุฑูุถ ูููุณุชุดูู ${hospital.name}:`, error.message);
        }
      }
    }

    // ุฅูุดุงุก ุจุนุถ ุงูุฒูุงุฑุงุช ุงููููุฐุฌูุฉ
    console.log('\n๐ ุฅูุดุงุก ุจุนุถ ุงูุฒูุงุฑุงุช ุงููููุฐุฌูุฉ...');
    for (let i = 0; i < 50; i++) {
      const randomPatient = patients[Math.floor(Math.random() * patients.length)];
      const hospitalDoctors = doctors.filter(d => d.hospitalId === randomPatient.hospitalId);
      const randomDoctor = hospitalDoctors[Math.floor(Math.random() * hospitalDoctors.length)];
      
      if (randomDoctor) {
        const visitDate = new Date();
        visitDate.setDate(visitDate.getDate() + Math.floor(Math.random() * 30)); // ุฎูุงู 30 ููู ุงููุงุฏูุฉ
        
        await prisma.visit.create({
          data: {
            patientId: randomPatient.id,
            doctorId: randomDoctor.id,
            hospitalId: randomPatient.hospitalId,
            scheduledAt: visitDate,
            status: 'SCHEDULED',
            notes: 'ููุนุฏ ูุญุต ุฏูุฑู',
          },
        });
      }
    }
    console.log('โ ุชู ุฅูุดุงุก 50 ุฒูุงุฑุฉ ูููุฐุฌูุฉ');

    console.log('\n๐ ุชู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!');
    console.log('\n๐ ุงูููุฎุต:');
    console.log(`- ุงููุฏู: ${cities.length}`);
    console.log(`- ุงููุณุชุดููุงุช: ${hospitals.length}`);
    console.log(`- ุงูุฃุทุจุงุก: ${doctors.length}`);
    console.log(`- ุงูููุธููู: ${staff.length}`);
    console.log(`- ุงููุฑุถู: ${patients.length}`);
    console.log('\n๐ ุจูุงูุงุช ุงูุฏุฎูู ุงูุชุฌุฑูุจูุฉ:');
    console.log('- ุงูุฅุฏุงุฑุฉ: admin@hospital.com / admin123');
    console.log('- ุงูุทุจูุจ: doctor1@[hospital].iq / doctor123');
    console.log('- ุงูููุธู: staff1@[hospital].iq / staff123');

  } catch (error) {
    console.error('โ Error seeding database:', error);
    process.exit(1);
  }
}

main()
  .catch((e) => {
    console.error('โ Error seeding database:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
